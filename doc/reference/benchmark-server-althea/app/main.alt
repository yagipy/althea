struct SockAddrIn {
    family: i16,
    port: i16,
    addr: InAddr,
    buf: [i8; 8],
}

struct InAddr {
    s_addr: i32,
}

func main() i32 {
    let socket_id = socket(2, 1, 0)
    if socket_id < 0 {
        println("socket error")
        0
    } else {
        let sock_addr_in = SockAddrIn {
            family: 2,
            port: 20480,
            addr: InAddr {
                s_addr: 0,
            },
            buf: [0, 0, 0, 0, 0, 0, 0, 0],
        }
        let bind_id = bind(socket_id, sock_addr_in, 16)
        if bind_id != 0 {
            println("bind error")
            close(socket_id)
        } else {
            let listen_id = listen(socket_id, 5)
            if listen_id != 0 {
                println("listen error")
                close(socket_id)
            } else {
                let transfer_res = transfer(socket_id)
                close(socket_id)
            }
        }
    }
}

func transfer(socket_id: i32) i32 {
    let accept_id = accept(socket_id)
    if accept_id < 0 {
        println("accept error")
        let close_res = close(accept_id)
        close(socket_id)
    } else {
        let buf: [i8; 2048] = [0; 2048]
        let recv_size: i64 = recv(accept_id, buf, 2048, 0)
        let res_buf: [i8; 2048] = [0; 2048]
        let send_size: i64 = send(accept_id, res_buf, 2048, "HTTP/1.0 200 OK
Content-Type: text/html

Welcome to Althea Server!
", 0)
        let close_res = close(accept_id)
        transfer(socket_id)
    }
}
